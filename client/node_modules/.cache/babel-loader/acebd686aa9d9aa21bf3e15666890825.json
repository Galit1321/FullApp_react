{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\galit\\\\Desktop\\\\interview\\\\fullstack_app\\\\client\\\\src\\\\Game.js\";\nimport React, { Component } from \"react\";\nimport \"./css/Cell.css\";\nimport Cell from \"./Cell\";\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeCell = data => {// let values=Array.from(data.data);\n      //console.log('line 32 ' +JSON.stringify(data));\n      ///console.log(values);\n    };\n\n    let grid = new Map();\n    this.state = {\n      score: 0,\n      name: props.name,\n      data: grid\n    };\n  }\n\n  addElem(e) {\n    let rr1, rc1;\n\n    do {\n      rr1 = Math.floor(Math.random() * 4);\n      rc1 = Math.floor(Math.random() * 4);\n    } while (this.state.data[rr1][rc1].full);\n    /*this.setState(prevState => ({\r\n        data: {\r\n            ...prevState.data,\r\n            [prevState.data[rr1][rc1].full]: e.target.value,\r\n        },\r\n    })); */\n\n  }\n\n  createData() {\n    let res = [];\n    let id = 1;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        res.push({\n          id: id,\n          kind: \"cell\",\n          full: false\n        });\n        id++;\n      }\n\n      this.state.data.set(i, res);\n      res = [];\n    }\n\n    console.log(this.state.data);\n  }\n\n  componentDidMount() {\n    this.createData();\n    fetch('http://localhost:3001/api/getScore').then(result => result.json()).then(res => this.setState({\n      score: res.score\n    }));\n  }\n\n  render() {\n    const score = this.state.score;\n    const data = this.state.data;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \" \", score), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \" Welcome to the game \")), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, data.length <= 0 ? \"NO DB ENTRIES YET\" : data.keys().map(k => React.createElement(\"tr\", {\n      key: k,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, data[k].map(elem => React.createElement(\"th\", {\n      key: elem.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Cell, {\n      parm: elem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }))))))), React.createElement(\"button\", {\n      onClick: this.changeCell({\n        data\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \" ClickMe\"));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["C:\\Users\\galit\\Desktop\\interview\\fullstack_app\\client\\src\\Game.js"],"names":["React","Component","Cell","Game","constructor","props","changeCell","data","grid","Map","state","score","name","addElem","e","rr1","rc1","Math","floor","random","full","createData","res","id","i","j","push","kind","set","console","log","componentDidMount","fetch","then","result","json","setState","render","length","keys","map","k","elem"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,gBAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,IAAN,SAAmBF,SAAnB,CAA4B;AACxBG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAyBlBC,UAzBkB,GAyBLC,IAAD,IAAQ,CACjB;AACC;AACA;AACH,KA7BiB;;AAEd,QAAIC,IAAI,GAAC,IAAIC,GAAJ,EAAT;AACA,SAAKC,KAAL,GAAW;AACPC,MAAAA,KAAK,EAAC,CADC;AAEPC,MAAAA,IAAI,EAACP,KAAK,CAACO,IAFJ;AAGPL,MAAAA,IAAI,EAAEC;AAHC,KAAX;AAKH;;AAEDK,EAAAA,OAAO,CAACC,CAAD,EAAG;AACN,QAAIC,GAAJ,EAAQC,GAAR;;AACA,OAAG;AACCD,MAAAA,GAAG,GAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAJ;AACAH,MAAAA,GAAG,GAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAJ;AACH,KAHD,QAIO,KAAKT,KAAL,CAAWH,IAAX,CAAgBQ,GAAhB,EAAqBC,GAArB,EAA0BI,IAJjC;AAKA;;;;;;;AAMH;;AASDC,EAAAA,UAAU,GAAG;AACT,QAAIC,GAAG,GAAC,EAAR;AACA,QAAIC,EAAE,GAAC,CAAP;;AACA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAC,CAAf,EAAiBA,CAAC,EAAlB,EAAqB;AACjB,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAC,CAAf,EAAiBA,CAAC,EAAlB,EAAqB;AACrBH,QAAAA,GAAG,CAACI,IAAJ,CAAS;AAACH,UAAAA,EAAE,EAACA,EAAJ;AAASI,UAAAA,IAAI,EAAE,MAAf;AAAuBP,UAAAA,IAAI,EAAE;AAA7B,SAAT;AACAG,QAAAA,EAAE;AACL;;AACD,WAAKb,KAAL,CAAWH,IAAX,CAAgBqB,GAAhB,CAAoBJ,CAApB,EAAsBF,GAAtB;AACAA,MAAAA,GAAG,GAAC,EAAJ;AACC;;AACDO,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAL,CAAWH,IAAvB;AACH;;AAEDwB,EAAAA,iBAAiB,GAAG;AAChB,SAAKV,UAAL;AACAW,IAAAA,KAAK,CAAC,oCAAD,CAAL,CACKC,IADL,CACUC,MAAM,IAAIA,MAAM,CAACC,IAAP,EADpB,EAEKF,IAFL,CAEUX,GAAG,IAAI,KAAKc,QAAL,CAAc;AAACzB,MAAAA,KAAK,EAACW,GAAG,CAACX;AAAX,KAAd,CAFjB;AAGH;;AAGD0B,EAAAA,MAAM,GAAE;AACJ,UAAM1B,KAAK,GAAC,KAAKD,KAAL,CAAWC,KAAvB;AACA,UAAMJ,IAAI,GAAE,KAAKG,KAAL,CAAWH,IAAvB;AACA,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAMI,KAAN,CADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAFA,CADQ,EAKR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGJ,IAAI,CAAC+B,MAAL,IAAe,CAAf,GACG,mBADH,GAEG/B,IAAI,CAACgC,IAAL,GAAYC,GAAZ,CAAiBC,CAAC,IAChB;AAAK,MAAA,GAAG,EAAEA,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKlC,IAAI,CAACkC,CAAD,CAAJ,CAAQD,GAAR,CAAYE,IAAI,IACb;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACnB,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAEmB,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADH,CADL,CADF,CAHN,CADA,CALQ,EAoBI;AAAQ,MAAA,OAAO,EAAE,KAAKpC,UAAL,CAAgB;AAACC,QAAAA;AAAD,OAAhB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBApBJ,CAAR;AAwBH;;AAlFuB;;AAoF5B,eAAeJ,IAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./css/Cell.css\";\r\nimport Cell from \"./Cell\"\r\n\r\nclass Game extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        let grid=new Map();\r\n        this.state={\r\n            score:0,\r\n            name:props.name,\r\n            data: grid,\r\n        }\r\n    }\r\n\r\n    addElem(e){\r\n        let rr1,rc1;\r\n        do {\r\n            rr1=Math.floor(Math.random() * 4); \r\n            rc1=Math.floor(Math.random() * 4);\r\n        }\r\n        while (this.state.data[rr1][rc1].full);\r\n        /*this.setState(prevState => ({\r\n            data: {\r\n                ...prevState.data,\r\n                [prevState.data[rr1][rc1].full]: e.target.value,\r\n            },\r\n        })); */\r\n    }\r\n\r\n    changeCell =(data)=>{  \r\n       // let values=Array.from(data.data);\r\n        //console.log('line 32 ' +JSON.stringify(data));\r\n        ///console.log(values);\r\n    }\r\n\r\n\r\n    createData() {\r\n        let res=[];\r\n        let id=1;\r\n        for (let i=0;i<4;i++){\r\n            for (let j=0;j<4;j++){\r\n            res.push({id:id , kind: \"cell\" ,full: false});\r\n            id++;\r\n        }\r\n        this.state.data.set(i,res);\r\n        res=[];\r\n        }\r\n        console.log(this.state.data)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.createData();\r\n        fetch('http://localhost:3001/api/getScore')\r\n            .then(result => result.json())\r\n            .then(res => this.setState({score:res.score}))\r\n    }\r\n\r\n\r\n    render(){\r\n        const score=this.state.score;\r\n        const data= this.state.data;\r\n        return (<div >\r\n        <div>\r\n        <h1> {score}</h1>\r\n        <h1> Welcome to the game </h1>   \r\n        </div>\r\n        <table>\r\n        <tbody >\r\n          {data.length <= 0\r\n            ? \"NO DB ENTRIES YET\"\r\n            : data.keys().map( k =>(\r\n                <tr  key={k}  >\r\n                    {data[k].map(elem => (\r\n                        <th key={elem.id}> \r\n                        <Cell parm={elem} /> \r\n                        </th>\r\n                    ))}\r\n                </tr>\r\n              ))}\r\n              </tbody>\r\n                </table>\r\n                    <button onClick={this.changeCell({data})} > ClickMe</button>\r\n    \r\n        </div>);\r\n\r\n    }\r\n} \r\nexport default Game;"]},"metadata":{},"sourceType":"module"}