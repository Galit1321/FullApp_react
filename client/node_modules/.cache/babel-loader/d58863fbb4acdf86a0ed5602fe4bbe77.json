{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\galit\\\\Desktop\\\\interview\\\\fullstack_app\\\\client\\\\src\\\\Register.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Field from \"./Field\";\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePasswordChange = value => {\n      this.setState({\n        password: value\n      });\n    };\n\n    this.handleNameChange = name_value => {\n      this.setState({\n        name: name_value\n      });\n    };\n\n    this.deleteFromDB = idTodelete => {\n      let objIdToDelete = null;\n      this.state.data.forEach(dat => {\n        if (dat.id === idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n      axios.delete(\"http://localhost:3001/api/deleteData\", {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    this.updateDB = (idToUpdate, updateToApply) => {\n      let objIdToUpdate = null;\n      this.state.data.forEach(dat => {\n        if (dat.id === idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n      axios.post(\"http://localhost:3001/api/updateData\", {\n        id: objIdToUpdate,\n        update: {\n          password: updateToApply\n        }\n      });\n    };\n\n    this.putDataToDB = () => {\n      let currentIds = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post(\"http://localhost:3001/api/putData\", {\n        id: idToBeAdded,\n        name: this.state.name,\n        password: this.state.password\n      }).then(res => {\n        console.log(res);\n        const history = this.props.history;\n        console.log(res.data.success);\n\n        if (res.data.success) {\n          history.replace(\"/Login\");\n        }\n      });\n    };\n\n    this.getDataFromDb = () => {\n      fetch(\"http://localhost:3001/api/getData\").then(data => data.json()).then(res => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.state = {\n      id: 0,\n      data: [],\n      name: null,\n      password: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n  }\n  /* componentDidMount() {\r\n    this.getDataFromDb();\r\n    if (!this.state.intervalIsSet) {\r\n      let interval = setInterval(this.getDataFromDb, 1000);\r\n      this.setState({ intervalIsSet: interval });\r\n    }\r\n  }\r\n    componentWillUnmount() {\r\n    if (this.state.intervalIsSet) {\r\n      clearInterval(this.state.intervalIsSet);\r\n      this.setState({ intervalIsSet: null });\r\n    }\r\n  }*/\n\n\n  render() {\n    //const { data } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Field, {\n      type_field: \"text\",\n      content: this.handleNameChange,\n      remark: \"insert name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(Field, {\n      remark: \"insert password\",\n      type_field: \"password\",\n      content: this.handlePasswordChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.putDataToDB(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"ADD\"));\n  }\n\n}\n\nexport default Register;\n/*\r\n<ul>\r\n          {data.length <= 0\r\n            ? \"NO DB ENTRIES YET\"\r\n            : data.map(dat => (\r\n                <li style={{ padding: \"10px\" }} key={dat}>\r\n                  <span style={{ color: \"gray\" }}> id: </span> {dat.id} <br />\r\n                  <span style={{ color: \"gray\" }}> data: </span>\r\n                  {dat.name}\r\n                </li>\r\n              ))}\r\n        </ul>\r\n*/","map":{"version":3,"sources":["C:\\Users\\galit\\Desktop\\interview\\fullstack_app\\client\\src\\Register.js"],"names":["React","Component","axios","Field","Register","constructor","props","handlePasswordChange","value","setState","password","handleNameChange","name_value","name","deleteFromDB","idTodelete","objIdToDelete","state","data","forEach","dat","id","_id","delete","updateDB","idToUpdate","updateToApply","objIdToUpdate","post","update","putDataToDB","currentIds","map","idToBeAdded","includes","then","res","console","log","history","success","replace","getDataFromDb","fetch","json","bind","intervalIsSet","idToDelete","objectToUpdate","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Field from \"./Field\";\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n    this.state = {\r\n      id: 0,\r\n      data: [],\r\n      name: null,\r\n      password: null,\r\n      intervalIsSet: false,\r\n      idToDelete: null,\r\n      idToUpdate: null,\r\n      objectToUpdate: null\r\n    };\r\n  }\r\n  /* componentDidMount() {\r\n    this.getDataFromDb();\r\n    if (!this.state.intervalIsSet) {\r\n      let interval = setInterval(this.getDataFromDb, 1000);\r\n      this.setState({ intervalIsSet: interval });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.state.intervalIsSet) {\r\n      clearInterval(this.state.intervalIsSet);\r\n      this.setState({ intervalIsSet: null });\r\n    }\r\n  }*/\r\n  handlePasswordChange = value => {\r\n    this.setState({ password: value });\r\n  };\r\n\r\n  handleNameChange = name_value => {\r\n    this.setState({ name: name_value });\r\n  };\r\n\r\n  deleteFromDB = idTodelete => {\r\n    let objIdToDelete = null;\r\n    this.state.data.forEach(dat => {\r\n      if (dat.id === idTodelete) {\r\n        objIdToDelete = dat._id;\r\n      }\r\n    });\r\n\r\n    axios.delete(\"http://localhost:3001/api/deleteData\", {\r\n      data: {\r\n        id: objIdToDelete\r\n      }\r\n    });\r\n  };\r\n\r\n  updateDB = (idToUpdate, updateToApply) => {\r\n    let objIdToUpdate = null;\r\n    this.state.data.forEach(dat => {\r\n      if (dat.id === idToUpdate) {\r\n        objIdToUpdate = dat._id;\r\n      }\r\n    });\r\n\r\n    axios.post(\"http://localhost:3001/api/updateData\", {\r\n      id: objIdToUpdate,\r\n      update: { password: updateToApply }\r\n    });\r\n  };\r\n\r\n  putDataToDB = () => {\r\n    let currentIds = this.state.data.map(data => data.id);\r\n    let idToBeAdded = 0;\r\n    while (currentIds.includes(idToBeAdded)) {\r\n      ++idToBeAdded;\r\n    }\r\n    axios.post(\"http://localhost:3001/api/putData\", {\r\n      id: idToBeAdded,\r\n      name: this.state.name,\r\n      password: this.state.password\r\n    }).then(res => {\r\n      console.log(res);\r\n      const { history } = this.props;\r\n      console.log(res.data.success);\r\n      if(res.data.success){\r\n        history.replace(\"/Login\");\r\n       \r\n      }\r\n    });\r\n  };\r\n\r\n  getDataFromDb = () => {\r\n    fetch(\"http://localhost:3001/api/getData\")\r\n      .then(data => data.json())\r\n      .then(res => this.setState({ data: res.data }));\r\n  };\r\n  render() {\r\n    //const { data } = this.state;\r\n    return (\r\n      <div>\r\n        \r\n        <Field\r\n          type_field=\"text\"\r\n          content={this.handleNameChange}\r\n          remark=\"insert name\"\r\n        ></Field>\r\n\r\n        <Field\r\n          remark=\"insert password\"\r\n          type_field=\"password\"\r\n          content={this.handlePasswordChange}\r\n        />\r\n        <button onClick={() => this.putDataToDB()}>ADD</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n\r\n\r\n/*\r\n<ul>\r\n          {data.length <= 0\r\n            ? \"NO DB ENTRIES YET\"\r\n            : data.map(dat => (\r\n                <li style={{ padding: \"10px\" }} key={dat}>\r\n                  <span style={{ color: \"gray\" }}> id: </span> {dat.id} <br />\r\n                  <span style={{ color: \"gray\" }}> data: </span>\r\n                  {dat.name}\r\n                </li>\r\n              ))}\r\n        </ul>\r\n*/"]},"metadata":{},"sourceType":"module"}