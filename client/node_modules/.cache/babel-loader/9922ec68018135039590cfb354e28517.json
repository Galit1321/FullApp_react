{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\galit\\\\Desktop\\\\interview\\\\fullstack_app\\\\client\\\\src\\\\Register.js\";\nimport React, { Component } from \"react\";\nimport Clock from \"./Clock\";\nimport axios from \"axios\";\nimport Field from \"./Field\";\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePasswordChange = value => {\n      this.setState({\n        password: value\n      });\n    };\n\n    this.handleNameChange = name_value => {\n      this.setState({\n        name: name_value\n      });\n    };\n\n    this.deleteFromDB = idTodelete => {\n      let objIdToDelete = null;\n      this.state.data.forEach(dat => {\n        if (dat.id === idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n      axios.delete(\"http://localhost:3001/api/deleteData\", {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    this.updateDB = (idToUpdate, updateToApply) => {\n      let objIdToUpdate = null;\n      this.state.data.forEach(dat => {\n        if (dat.id === idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n      axios.post(\"http://localhost:3001/api/updateData\", {\n        id: objIdToUpdate,\n        update: {\n          password: updateToApply\n        }\n      });\n    };\n\n    this.putDataToDB = () => {\n      let currentIds = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post(\"http://localhost:3001/api/putData\", {\n        id: idToBeAdded,\n        name: this.state.name,\n        password: this.state.password\n      });\n    };\n\n    this.getDataFromDb = () => {\n      fetch(\"http://localhost:3001/api/getData\").then(data => data.json()).then(res => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.state = {\n      id: 0,\n      data: [],\n      name: null,\n      password: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n  }\n\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  }\n\n  render() {\n    const data = this.state.data;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Clock, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, data.length <= 0 ? \"NO DB ENTRIES YET\" : data.map(dat => React.createElement(\"li\", {\n      style: {\n        padding: \"10px\"\n      },\n      key: dat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        color: \"gray\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \" id: \"), \" \", dat.id, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        color: \"gray\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \" data: \"), dat.name))), React.createElement(Field, {\n      content: this.handleNameChange,\n      remark: \"insert name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(Field, {\n      remark: \"insert password\",\n      content: this.handlePasswordChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.putDataToDB(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"ADD\"));\n  }\n\n}\n\nexport default Register;","map":{"version":3,"sources":["C:\\Users\\galit\\Desktop\\interview\\fullstack_app\\client\\src\\Register.js"],"names":["React","Component","Clock","axios","Field","Register","constructor","props","handlePasswordChange","value","setState","password","handleNameChange","name_value","name","deleteFromDB","idTodelete","objIdToDelete","state","data","forEach","dat","id","_id","delete","updateDB","idToUpdate","updateToApply","objIdToUpdate","post","update","putDataToDB","currentIds","map","idToBeAdded","includes","getDataFromDb","fetch","then","json","res","bind","intervalIsSet","idToDelete","objectToUpdate","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","length","padding","color"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport Clock from \"./Clock\"\r\nimport axios from \"axios\";\r\nimport Field from \"./Field\";\r\n\r\n\r\nclass Register extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n    this.state = {\r\n    id: 0,\r\n      data:[],\r\n      name: null,\r\n      password:null,\r\n      intervalIsSet: false,\r\n      idToDelete: null,\r\n      idToUpdate: null,\r\n      objectToUpdate: null\r\n   \r\n  };}\r\n  componentDidMount() {\r\n    this.getDataFromDb();\r\n    if (!this.state.intervalIsSet) {\r\n      let interval = setInterval(this.getDataFromDb, 1000);\r\n      this.setState({ intervalIsSet: interval });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.state.intervalIsSet) {\r\n      clearInterval(this.state.intervalIsSet);\r\n      this.setState({ intervalIsSet: null });\r\n    }\r\n  }\r\n  handlePasswordChange=(value)=>{\r\n    this.setState({password:value})\r\n  }\r\n\r\n  handleNameChange=(name_value)=>{\r\n    this.setState({name:name_value})\r\n  }\r\n\r\n  deleteFromDB = idTodelete => {\r\n    let objIdToDelete = null;\r\n    this.state.data.forEach(dat => {\r\n      if (dat.id === idTodelete) {\r\n        objIdToDelete = dat._id;\r\n      }\r\n    });\r\n\r\n    axios.delete(\"http://localhost:3001/api/deleteData\", {\r\n      data: {\r\n        id: objIdToDelete\r\n      }\r\n    });\r\n  };\r\n\r\n  updateDB = (idToUpdate, updateToApply) => {\r\n    let objIdToUpdate = null;\r\n    this.state.data.forEach(dat => {\r\n      if (dat.id === idToUpdate) {\r\n        objIdToUpdate = dat._id;\r\n      }\r\n    });\r\n\r\n    axios.post(\"http://localhost:3001/api/updateData\", {\r\n      id: objIdToUpdate,\r\n      update: { password: updateToApply }\r\n    });\r\n  };\r\n\r\n  putDataToDB = () => {\r\n    let currentIds = this.state.data.map(data => data.id);\r\n    let idToBeAdded = 0;\r\n    while (currentIds.includes(idToBeAdded)) {\r\n      ++idToBeAdded;\r\n    }\r\n    axios.post(\"http://localhost:3001/api/putData\", { \r\n      id: idToBeAdded,\r\n      name:this.state.name,\r\n      password:this.state.password\r\n      });\r\n  };\r\n  getDataFromDb = () => {\r\n    fetch(\"http://localhost:3001/api/getData\")\r\n      .then(data => data.json())\r\n      .then(res => this.setState({ data: res.data }));\r\n  };\r\n  render() {\r\n    const { data } = this.state;\r\n    return (\r\n      <div>\r\n      <Clock></Clock>\r\n      <ul>\r\n          {data.length <= 0 ? \"NO DB ENTRIES YET\" : data.map(dat => (\r\n            <li style={{ padding: \"10px\" }} key={dat}>\r\n              <span style={{ color: \"gray\" }}> id: </span> {dat.id} <br />\r\n              <span style={{ color: \"gray\" }}> data: </span>\r\n              {dat.name}\r\n            </li>\r\n          ))}\r\n        </ul> \r\n    <Field    content={this.handleNameChange}\r\n    remark=\"insert name\"></Field>\r\n  \r\n    <Field remark=\"insert password\"  content={this.handlePasswordChange} />\r\n          <button onClick={() => this.putDataToDB()}>\r\n            ADD\r\n          </button>\r\n        </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;"]},"metadata":{},"sourceType":"module"}